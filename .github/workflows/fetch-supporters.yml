name: Fetch Buy Me a Coffee Supporters

on:
  schedule:
    - cron: '0 6 * * 0'
  workflow_dispatch:

jobs:
  fetch-supporters:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read 
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Fetch all supporters and members from Buy Me a Coffee API
        env:
          BUYMEACOFFEE_API_TOKEN: ${{ secrets.BUYMEACOFFEE_API_TOKEN }}
        run: |
          set -e


          # Helper to fetch all paginated results for a given endpoint
          fetch_all_pages_raw() {
            local url=$1
            local page=1
            local tmpfile="${2}_allpages.tmp"
            : > "$tmpfile"
            while :; do
              http_status=$(curl -s -o resp.json -w "%{http_code} %{content_type}" -H "Authorization: Bearer $BUYMEACOFFEE_API_TOKEN" "${url}?page=${page}")
              status_code=$(echo "$http_status" | awk '{print $1}')
              content_type=$(echo "$http_status" | awk '{print $2}')
              echo "Page $page: HTTP $status_code, Content-Type: $content_type"
              resp=$(cat resp.json)
              rm -f resp.json
              # Check if response is valid JSON and contains .data
              if ! echo "$resp" | jq -e .data > /dev/null 2>&1; then
                echo "Invalid or empty API response on page $page"
                break
              fi
              page_data=$(echo "$resp" | jq '.data')
              if [ "$(echo "$page_data" | jq 'length')" -eq 0 ]; then
                break
              fi
              echo "$page_data" >> "$tmpfile"
              page=$((page + 1))
            done
            if [ ! -s "$tmpfile" ]; then
              echo "[]"
            else
              jq -s 'add' "$tmpfile"
            fi
            rm -f "$tmpfile"
          }

          # Fetch all one-time supporters (raw)
          raw_supporters=$(fetch_all_pages_raw "https://developers.buymeacoffee.com/api/v1/supporters" "supporters")

          # Fetch all members (raw)
          raw_members=$(fetch_all_pages_raw "https://developers.buymeacoffee.com/api/v1/subscriptions?status=all" "members")

          # Validate and save data to temporary files
          if ! echo "$raw_supporters" | jq . > /dev/null 2>&1; then
            echo "Invalid JSON in raw_supporters, using empty array"
            raw_supporters="[]"
          fi

          if ! echo "$raw_members" | jq . > /dev/null 2>&1; then
            echo "Invalid JSON in raw_members, using empty array"
            raw_members="[]"
          fi

          # Extract only payer_name from both arrays, merge, deduplicate, and save as usernames
          jq -n \
            --slurpfile supporters <(echo "$raw_supporters") \
            --slurpfile members <(echo "$raw_members") \
            '{usernames: ((($supporters[0][]?.payer_name // empty) + ($members[0][]?.payer_name // empty)) | unique | sort)}' > src/js/main/utils/supporters.json

          echo "Usernames data updated successfully!"
          cat src/js/main/utils/supporters.json

      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code src/js/main/utils/supporters.json || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Commit and push changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/js/main/utils/supporters.json
          git commit -m "Update supporters data - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
