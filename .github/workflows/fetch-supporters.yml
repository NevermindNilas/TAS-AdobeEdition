name: Fetch Buy Me a Coffee Supporters

on:
  schedule:
    - cron: '0 6 * * 0'
  workflow_dispatch:

jobs:
  fetch-supporters:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read 
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Fetch all supporters and members from Buy Me a Coffee API
        env:
          BUYMEACOFFEE_API_TOKEN: ${{ secrets.BUYMEACOFFEE_API_TOKEN }}
        run: |
          # Create empty supporters array
          echo '[]' > supporters_temp.json
          
          # Fetch active members
          page=1
          while true; do
            echo "Fetching page $page of active members..."
            response=$(curl -s -w "%{http_code}" \
              "https://developers.buymeacoffee.com/api/v1/subscriptions?status=all&page=$page" \
              -H "Authorization: Bearer $BUYMEACOFFEE_API_TOKEN" \
              -X GET)
            
            http_code="${response: -3}"
            json_response="${response%???}"
            
            if [ "$http_code" != "200" ]; then
              echo "Error fetching active members (page $page): HTTP $http_code"
              echo "$json_response"
              break
            fi
            
            # Extract payer names and add to supporters array
            echo "$json_response" | jq -r '.data[]?.payer_name // empty' | while read -r name; do
              if [ -n "$name" ] && [ "$name" != "null" ]; then
                echo "\"$name\""
              fi
            done >> names_temp.txt
            
            # Check if there's a next page
            next_page=$(echo "$json_response" | jq -r '.next_page_url // empty')
            if [ -z "$next_page" ] || [ "$next_page" == "null" ]; then
              break
            fi
            
            page=$((page + 1))
          done
          
          # Fetch one-time supporters (if available)
          echo "Fetching one-time supporters..."
          response=$(curl -s -w "%{http_code}" \
            "https://developers.buymeacoffee.com/api/v1/supporters" \
            -H "Authorization: Bearer $BUYMEACOFFEE_API_TOKEN" \
            -X GET)
          
          http_code="${response: -3}"
          json_response="${response%???}"
          
          if [ "$http_code" == "200" ]; then
            # Extract payer names from one-time supporters
            echo "$json_response" | jq -r '.data[]?.payer_name // empty' | while read -r name; do
              if [ -n "$name" ] && [ "$name" != "null" ]; then
                echo "\"$name\""
              fi
            done >> names_temp.txt
          else
            echo "Note: One-time supporters endpoint returned HTTP $http_code (may not be available)"
          fi
          
          # Create final JSON array with unique names
          if [ -f names_temp.txt ]; then
            # Remove duplicates, sort, and create JSON array
            sort names_temp.txt | uniq | jq -s '.' > src/js/main/utils/supporters.json
            rm names_temp.txt
          else
            echo '[]' > src/js/main/utils/supporters.json
          fi
          
          echo "Supporters data updated successfully"
          echo "Total unique supporters: $(jq length src/js/main/utils/supporters.json)"


      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code src/js/main/utils/supporters.json || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Commit and push changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/js/main/utils/supporters.json
          git commit -m "Update supporters data - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
