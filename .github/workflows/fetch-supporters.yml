name: Fetch Buy Me a Coffee Supporters

on:
  schedule:
    - cron: '0 6 * * 0'
  workflow_dispatch:

jobs:
  fetch-supporters:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read 
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Fetch all supporters and members from Buy Me a Coffee API
        env:
          BUYMEACOFFEE_API_TOKEN: ${{ secrets.BUYMEACOFFEE_API_TOKEN }}
        run: |
          set -e

          # Helper to fetch all paginated results for a given endpoint
          fetch_all_pages() {
            local url=$1
            local prefix=$2
            local page=1
            local tmpfile="${prefix}_allpages.tmp"
            : > "$tmpfile"
            while :; do
              resp=$(curl -s -H "Authorization: Bearer $BUYMEACOFFEE_API_TOKEN" "${url}?page=${page}")
              # Check if response is valid JSON and contains .data
              if ! echo "$resp" | jq -e .data > /dev/null 2>&1; then
                echo "Invalid or empty API response on page $page:"
                echo "$resp"
                break
              fi
              page_data=$(echo "$resp" | jq '.data')
              if [ "$(echo "$page_data" | jq 'length')" -eq 0 ]; then
                break
              fi
              echo "$page_data" >> "$tmpfile"
              page=$((page + 1))
            done
            # Check if we have any data at all
            if [ ! -s "$tmpfile" ]; then
              echo "[]"
            else
              # Merge all arrays from the file into one array
              jq -s 'add' "$tmpfile"
            fi
            # Clean up
            rm -f "$tmpfile"
          }

          # Fetch all one-time supporters
          one_time_supporters=$(fetch_all_pages "https://developers.buymeacoffee.com/api/v1/supporters" "supporters")
          
          # Fetch all members (active and inactive)
          members=$(fetch_all_pages "https://developers.buymeacoffee.com/api/v1/subscriptions?status=all" "members")

          # Validate and save data to temporary files
          if ! echo "$one_time_supporters" | jq . > /dev/null 2>&1; then
            echo "Invalid JSON in one_time_supporters, using empty array"
            one_time_supporters="[]"
          fi
          
          if ! echo "$members" | jq . > /dev/null 2>&1; then
            echo "Invalid JSON in members, using empty array"
            members="[]"
          fi
          
          # Save data to temporary files to avoid argument list too long error
          echo "$one_time_supporters" > one_time_supporters.tmp
          echo "$members" > members.tmp
          
          # Normalize and merge both datasets using files instead of command line args
          jq -n \
            --slurpfile one_time one_time_supporters.tmp \
            --slurpfile members members.tmp '
            {
              supporters: (
                (($one_time[0] // [])[] | {
                  name: .payer_name,
                  coffees: .support_coffees,
                  totalAmount: .support_coffee_price,
                  message: .support_note,
                  supportedAt: .created_on,
                  type: "one-time"
                }) +
                (($members[0] // [])[] | {
                  name: .payer_name,
                  coffees: .support_coffees,
                  totalAmount: .support_coffee_price,
                  message: .support_note,
                  supportedAt: .created_on,
                  type: "member"
                })
              )
            }
          ' | jq '.supporters |= unique_by(.name, .supportedAt)' > src/js/main/utils/supporters.json
          
          # Clean up temporary files
          rm -f one_time_supporters.tmp members.tmp

          echo "Supporters data updated successfully!"
          cat src/js/main/utils/supporters.json

      - name: Check for changes
        id: git-check
        run: |
          git diff --exit-code src/js/main/utils/supporters.json || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Commit and push changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/js/main/utils/supporters.json
          git commit -m "Update supporters data - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
